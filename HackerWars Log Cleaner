// ==UserScript==
// @name         HackerWars Log Cleaner with Dropdown, Custom Log Message & Insert
// @namespace    http://tampermonkey.net/
// @version      1.3.0
// @description  Clears logs if conditions are met, inserts a custom log message into the log textarea, then clicks the edit button.
// @match        https://hackerwars.io/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Wait for the DOM to load (using DOMContentLoaded or readyState)
    function initScript() {
        // Get persistent state (default true)
        let autoClearEnabled = localStorage.getItem("autoClearEnabled");
        if (autoClearEnabled === null) {
            autoClearEnabled = true;
            localStorage.setItem("autoClearEnabled", "true");
        } else {
            autoClearEnabled = (autoClearEnabled === "true");
        }

        // Retrieve saved custom log message (if any)
        let customLogMessage = localStorage.getItem("customLogMessage") || "";

        // Creates the main status container and dropdown menu
        function createStatusContainer() {
            let container = document.getElementById("hw-status-container");
            if (!container) {
                container = document.createElement("li");
                container.id = "hw-status-container";
                container.className = "btn btn-inverse";
                container.style.position = "relative"; // for dropdown positioning

                let link = document.createElement("a");
                link.href = "#";

                let mainSpan = document.createElement("span");
                mainSpan.className = "main-status";

                let icon = document.createElement("i");
                icon.className = "fa fa-inverse fa-info";
                mainSpan.appendChild(icon);

                mainSpan.appendChild(document.createTextNode(" "));

                let textSpan = document.createElement("span");
                textSpan.className = "text";
                textSpan.textContent = "Status";
                mainSpan.appendChild(textSpan);

                link.appendChild(mainSpan);
                container.appendChild(link);

                // Create dropdown menu (hidden by default)
                let dropdown = document.createElement("div");
                dropdown.id = "hw-status-dropdown";
                dropdown.style.position = "absolute";
                dropdown.style.top = "100%";
                dropdown.style.left = "0";
                dropdown.style.backgroundColor = "#000";
                dropdown.style.border = "1px solid #ccc";
                dropdown.style.padding = "5px";
                dropdown.style.zIndex = "1000";
                dropdown.style.display = "none";
                dropdown.style.minWidth = "150px";

                // Create the auto-clear toggle option
                let toggleOption = document.createElement("div");
                toggleOption.id = "hw-auto-clear-toggle";
                toggleOption.style.cursor = "pointer";
                toggleOption.style.padding = "5px";
                toggleOption.style.borderBottom = "1px solid #eee";
                toggleOption.textContent = autoClearEnabled ? "Auto Clear Logs: On" : "Auto Clear Logs: Off";
                toggleOption.addEventListener("click", function(e) {
                    e.stopPropagation();
                    autoClearEnabled = !autoClearEnabled;
                    localStorage.setItem("autoClearEnabled", autoClearEnabled ? "true" : "false");
                    toggleOption.textContent = autoClearEnabled ? "Auto Clear Logs: On" : "Auto Clear Logs: Off";
                    setStatusMessage("Auto Clear toggled " + (autoClearEnabled ? "On" : "Off"));
                });
                dropdown.appendChild(toggleOption);

                // Create the "Set Custom Log Message" option
                let customMsgOption = document.createElement("div");
                customMsgOption.id = "hw-custom-msg-toggle";
                customMsgOption.style.cursor = "pointer";
                customMsgOption.style.padding = "5px";
                customMsgOption.style.borderBottom = "1px solid #eee";
                customMsgOption.textContent = "Set Log Message";
                customMsgOption.addEventListener("click", function(e) {
                    e.stopPropagation();
                    // Load saved message into the modal textarea before showing
                    $("#customMessage").val(localStorage.getItem("customLogMessage") || "");
                    $("#customModal").modal("show");
                });
                dropdown.appendChild(customMsgOption);

                // (Add additional dropdown options here if needed)

                container.appendChild(dropdown);

                // Toggle dropdown visibility when the status link is clicked
                link.addEventListener("click", function(e) {
                    e.preventDefault();
                    dropdown.style.display = dropdown.style.display === "none" ? "block" : "none";
                });

                // Hide dropdown when clicking outside the container
                document.addEventListener("click", function(e) {
                    if (!container.contains(e.target)) {
                        dropdown.style.display = "none";
                    }
                });

                // Insert the container into the page navigation if available
                let userNav = document.getElementById("user-nav");
                if (userNav) {
                    let btnGroup = userNav.querySelector("ul.nav.btn-group");
                    if (btnGroup) {
                        btnGroup.insertBefore(container, btnGroup.firstChild);
                    } else {
                        userNav.appendChild(container);
                    }
                } else {
                    document.body.appendChild(container);
                }
            }
            return container;
        }

        // Overwrite old status messages instead of appending new ones.
        function setStatusMessage(message) {
            const container = createStatusContainer();
            let msgEl = container.querySelector("span.status-msg");
            if (!msgEl) {
                msgEl = document.createElement("span");
                msgEl.className = "status-msg";
                msgEl.style.fontWeight = "bold";
                msgEl.style.marginLeft = "10px";
                const mainSpan = container.querySelector("span.main-status");
                if (mainSpan) {
                    mainSpan.appendChild(msgEl);
                } else {
                    container.appendChild(msgEl);
                }
            }
            msgEl.textContent = message;
        }

        // Retrieve your IP from the header element
        function getMyIP() {
            let ipElement = document.querySelector('.header-ip-show');
            if (ipElement) {
                return ipElement.innerText.trim();
            }
            console.log("IP element not found.");
            return null;
        }

        // Listen for various alert messages and take appropriate action
        function listenForAlerts() {
            function handleAlert(alertElement) {
                const alertText = alertElement.innerText;
                if (alertText.includes('Log successfully edited')) {
                    console.log("Success message detected, redirecting to software page...");
                    window.location.href = "https://hackerwars.io/internet?view=software";
                } else if (alertText.includes('Software successfully downloaded')) {
                    console.log("Software successfully downloaded detected, redirecting to logs page...");
                    window.location.href = "https://hackerwars.io/internet?view=logs";
                } else if (alertText.includes('Successfully cracked') && alertText.includes('Password is')) {
                    console.log("Cracked message detected, clicking the Login button...");
                    const loginButton = document.querySelector('input[type="submit"].btn.btn-inverse[value="Login"]');
                    if (loginButton) {
                        loginButton.click();
                    } else {
                        console.log("Login button not found.");
                    }
                } else if (alertText.includes('This IP is already on your hacked database')) {
                    console.log("Error alert detected, clicking the Login button...");
                    const loginButton = document.querySelector('input[type="submit"].btn.btn-inverse[value="Login"]');
                    if (loginButton) {
                        loginButton.click();
                    } else {
                        console.log("Login button not found.");
                    }
                } else if (alertText.includes('Software uninstalled') || alertText.includes('Software installed')) {
                    console.log("Software alert detected, redirecting to log page...");
                    window.location.href = "https://hackerwars.io/log";
                }
            }

            // Check if an alert is already present
            const existingAlertSuccess = document.querySelector('.alert.alert-success');
            const existingAlertDanger = document.querySelector('.alert.alert-danger');
            if (existingAlertSuccess) {
                handleAlert(existingAlertSuccess);
                return;
            }
            if (existingAlertDanger) {
                handleAlert(existingAlertDanger);
                return;
            }

            // Otherwise, observe DOM changes for new alerts
            const observer = new MutationObserver((mutations, obs) => {
                const alertSuccess = document.querySelector('.alert.alert-success');
                const alertDanger = document.querySelector('.alert.alert-danger');
                if (alertSuccess) {
                    handleAlert(alertSuccess);
                    obs.disconnect();
                    return;
                }
                if (alertDanger) {
                    handleAlert(alertDanger);
                    obs.disconnect();
                    return;
                }
            });
            observer.observe(document.body, { childList: true, subtree: true });
        }

        // Function that checks the logs and, when necessary, clears the log textarea, inserts the custom log message, then clicks the edit button.
        function checkAndClearLogs() {
            if (!autoClearEnabled) {
                console.log("Auto log clearing is disabled.");
                setStatusMessage("Auto log clearing is disabled.");
                return;
            }

            let logArea = document.querySelector('.logarea');
            if (!logArea) {
                console.log("Log area element not found.");
                setStatusMessage("Looking for logs 👀");
                return;
            }
            let logText = logArea.value || logArea.innerText;

            // Define a helper to clear, insert the custom text, then click the button.
            function clearAndInsert() {
                logArea.value = ""; // Clear the textarea
                // Insert the custom log message (if any)
                logArea.value = customLogMessage;
                setStatusMessage("Log updated with custom message.");
                let editLogBtn = document.querySelector('input[type="submit"][value="Edit log file"]');
                if (editLogBtn) {
                    console.log("Clicking the Edit log file button...");
                    editLogBtn.click();
                } else {
                    console.log("Edit log file button not found.");
                }
            }

            // If we are on the log page, proceed if the textarea isn't empty.
            if (window.location.pathname === "/log") {
                if (logText.trim() !== "") {
                    console.log("On log page, updating log file with custom message...");
                    clearAndInsert();
                } else {
                    console.log("Log area is already empty. Inserting custom message.");
                    clearAndInsert();
                }
                return;
            }

            // Otherwise, check if the log contains your IP and then update if needed.
            let myIP = getMyIP();
            if (!myIP) {
                console.log("Unable to retrieve IP. Aborting log check.");
                setStatusMessage("IP not found.");
                return;
            }
            console.log("My IP:", myIP);
            if (logText.includes(myIP) && logText.trim() !== "") {
                console.log("IP found in logs. Updating log file with custom message...");
                clearAndInsert();
                listenForAlerts();
            } else {
                console.log("IP not found in logs or log area is empty. No action taken.");
                setStatusMessage("No log entries for IP: " + myIP);
            }
        }

        // Create and append the Bootstrap modal for custom log messages
        function createCustomMessageModal() {
            if (document.getElementById("customModal")) return;
            const modalHTML = `
            <div id="customModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="customModalLabel" aria-hidden="true">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h3 id="customModalLabel">Insert Custom Log Message</h3>
              </div>
              <div class="modal-body">
                <textarea id="customMessage" class="span12" rows="5" placeholder="Enter your custom log message here...">${customLogMessage}</textarea>
              </div>
              <div class="modal-footer">
                <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
                <button class="btn btn-primary" id="saveCustomMessage">Save changes</button>
              </div>
            </div>
            `;
            let modalContainer = document.createElement("div");
            modalContainer.innerHTML = modalHTML;
            document.body.appendChild(modalContainer);

            // Bind the save button event (using jQuery)
            $("#saveCustomMessage").on("click", function() {
                let newMessage = $("#customMessage").val();
                localStorage.setItem("customLogMessage", newMessage);
                customLogMessage = newMessage;
                setStatusMessage("Custom log message saved.");
                $("#customModal").modal("hide");
            });
        }

        // Initialize elements and start checking/logging
        createStatusContainer();
        createCustomMessageModal();
        setTimeout(checkAndClearLogs, 500);
        listenForAlerts();
    }

    if (document.readyState === "complete" || document.readyState === "interactive") {
        initScript();
    } else {
        document.addEventListener("DOMContentLoaded", initScript);
    }
})();
