// ==UserScript==
// @name         HackerWars Log Cleaner with Dropdown Toggle
// @namespace    http://tampermonkey.net/
// @version      1.1.0
// @description  Checks logs for your IP, clears them if found (when enabled), then listens for various alerts and redirects/logs in accordingly.
// @match        https://hackerwars.io/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Get persistent state (default true)
    let autoClearEnabled = localStorage.getItem("autoClearEnabled");
    if (autoClearEnabled === null) {
        autoClearEnabled = true;
        localStorage.setItem("autoClearEnabled", "true");
    } else {
        autoClearEnabled = (autoClearEnabled === "true");
    }

    // Creates the main status container and dropdown menu
    function createStatusContainer() {
        let container = document.getElementById("hw-status-container");
        if (!container) {
            container = document.createElement("li");
            container.id = "hw-status-container";
            container.className = "btn btn-inverse";
            container.style.position = "relative"; // for dropdown positioning

            let link = document.createElement("a");
            link.href = "#";

            let mainSpan = document.createElement("span");
            mainSpan.className = "main-status";

            let icon = document.createElement("i");
            icon.className = "fa fa-inverse fa-info";
            mainSpan.appendChild(icon);

            mainSpan.appendChild(document.createTextNode(" "));

            let textSpan = document.createElement("span");
            textSpan.className = "text";
            textSpan.textContent = "Status";
            mainSpan.appendChild(textSpan);

            link.appendChild(mainSpan);
            container.appendChild(link);

            // Create dropdown menu (hidden by default)
            let dropdown = document.createElement("div");
            dropdown.id = "hw-status-dropdown";
            dropdown.style.position = "absolute";
            dropdown.style.top = "100%";
            dropdown.style.left = "0";
            dropdown.style.backgroundColor = "#000";
            dropdown.style.border = "1px solid #ccc";
            dropdown.style.padding = "5px";
            dropdown.style.zIndex = "1000";
            dropdown.style.display = "none";
            dropdown.style.minWidth = "150px";

            // Create the auto-clear toggle option
            let toggleOption = document.createElement("div");
            toggleOption.id = "hw-auto-clear-toggle";
            toggleOption.style.cursor = "pointer";
            toggleOption.style.padding = "5px";
            toggleOption.style.borderBottom = "1px solid #eee";
            toggleOption.textContent = autoClearEnabled ? "Auto Clear Logs: On" : "Auto Clear Logs: Off";
            toggleOption.addEventListener("click", function(e) {
                // Prevent dropdown from immediately closing when clicking inside
                e.stopPropagation();
                autoClearEnabled = !autoClearEnabled;
                localStorage.setItem("autoClearEnabled", autoClearEnabled ? "true" : "false");
                toggleOption.textContent = autoClearEnabled ? "Auto Clear: On" : "Auto Clear: Off";
                addStatusMessage("Auto Clear toggled " + (autoClearEnabled ? "On" : "Off"));
            });
            dropdown.appendChild(toggleOption);

            // Optionally, you can add more options here

            container.appendChild(dropdown);

            // Toggle dropdown visibility when the status link is clicked
            link.addEventListener("click", function(e) {
                e.preventDefault();
                // Toggle dropdown visibility
                dropdown.style.display = dropdown.style.display === "none" ? "block" : "none";
            });

            // Hide dropdown when clicking outside the container
            document.addEventListener("click", function(e) {
                if (!container.contains(e.target)) {
                    dropdown.style.display = "none";
                }
            });

            // Insert the container into the page navigation
            let userNav = document.getElementById("user-nav");
            if (userNav) {
                let btnGroup = userNav.querySelector("ul.nav.btn-group");
                if (btnGroup) {
                    btnGroup.insertBefore(container, btnGroup.firstChild);
                } else {
                    userNav.appendChild(container);
                }
            } else {
                document.body.appendChild(container);
            }
        }
        return container;
    }

    // Append status messages to the status container
    function addStatusMessage(message) {
        const container = createStatusContainer();
        const msgEl = document.createElement("span");
        msgEl.textContent = message;
        msgEl.style.fontWeight = "bold";
        msgEl.style.marginLeft = "10px";
        const mainSpan = container.querySelector("span.main-status");
        if (mainSpan) {
            mainSpan.appendChild(msgEl);
        } else {
            container.appendChild(msgEl);
        }
    }

    // Retrieve your IP from the header element
    function getMyIP() {
        let ipElement = document.querySelector('.header-ip-show');
        if (ipElement) {
            return ipElement.innerText.trim();
        }
        console.log("IP element not found.");
        return null;
    }

    // Listen for various alert messages and take appropriate action
    function listenForAlerts() {
        function handleAlert(alertElement) {
            const alertText = alertElement.innerText;
            if (alertText.includes('Log successfully edited')) {
                console.log("Success message detected, redirecting to software page...");
                window.location.href = "https://hackerwars.io/internet?view=software";
            } else if (alertText.includes('Software successfully downloaded')) {
                console.log("Software successfully downloaded detected, redirecting to logs page...");
                window.location.href = "https://hackerwars.io/internet?view=logs";
            } else if (alertText.includes('Successfully cracked') && alertText.includes('Password is')) {
                console.log("Cracked message detected, clicking the Login button...");
                const loginButton = document.querySelector('input[type="submit"].btn.btn-inverse[value="Login"]');
                if (loginButton) {
                    loginButton.click();
                } else {
                    console.log("Login button not found.");
                }
            } else if (alertText.includes('This IP is already on your hacked database')) {
                console.log("Error alert detected, clicking the Login button...");
                const loginButton = document.querySelector('input[type="submit"].btn.btn-inverse[value="Login"]');
                if (loginButton) {
                    loginButton.click();
                } else {
                    console.log("Login button not found.");
                }
            } else if (alertText.includes('Software uninstalled') || alertText.includes('Software installed')) {
                console.log("Software alert detected, redirecting to log page...");
                window.location.href = "https://hackerwars.io/log";
            }
        }

        // Check immediately if any alert is already present
        const existingAlertSuccess = document.querySelector('.alert.alert-success');
        const existingAlertDanger = document.querySelector('.alert.alert-danger');
        if (existingAlertSuccess) {
            handleAlert(existingAlertSuccess);
            return;
        }
        if (existingAlertDanger) {
            handleAlert(existingAlertDanger);
            return;
        }

        // Otherwise, observe DOM changes for new alerts
        const observer = new MutationObserver((mutations, obs) => {
            const alertSuccess = document.querySelector('.alert.alert-success');
            const alertDanger = document.querySelector('.alert.alert-danger');
            if (alertSuccess) {
                handleAlert(alertSuccess);
                obs.disconnect();
                return;
            }
            if (alertDanger) {
                handleAlert(alertDanger);
                obs.disconnect();
                return;
            }
        });
        observer.observe(document.body, { childList: true, subtree: true });
    }

    // Function that checks the logs and clears them if on the log page or if your IP is found
    function checkAndClearLogs() {
        if (!autoClearEnabled) {
            console.log("Auto log clearing is disabled.");
            addStatusMessage("Auto log clearing is disabled.");
            return;
        }

        let logArea = document.querySelector('.logarea');
        if (!logArea) {
            console.log("Log area element not found.");
            addStatusMessage("Looking for logs ðŸ‘€");
            return;
        }
        let logText = logArea.value || logArea.innerText;

        // If we are on the log page, clear logs unconditionally
        if (window.location.pathname === "/log") {
            console.log("On log page, clearing logs...");
            logArea.value = "";
            addStatusMessage("Logs cleared.");
            let editLogBtn = document.querySelector('input[type="submit"][value="Edit log file"]');
            if (editLogBtn) {
                console.log("Clicking the Edit log file button...");
                editLogBtn.click();
            } else {
                console.log("Edit log file button not found.");
            }
            return;
        }

        // Otherwise, check if the log contains your IP
        let myIP = getMyIP();
        if (!myIP) {
            console.log("Unable to retrieve IP. Aborting log check.");
            addStatusMessage("IP not found.");
            return;
        }
        console.log("My IP:", myIP);
        if (logText.includes(myIP)) {
            console.log("IP found in logs. Clearing logs...");
            logArea.value = "";
            addStatusMessage("Logs cleared for IP: " + myIP);
            let editLogBtn = document.querySelector('input[type="submit"][value="Edit log file"]');
            if (editLogBtn) {
                console.log("Clicking the Edit log file button...");
                editLogBtn.click();
                // Start listening for alert messages after editing logs
                listenForAlerts();
            } else {
                console.log("Edit log file button not found.");
            }
        } else {
            console.log("IP not found in logs. No action taken.");
            addStatusMessage("No log entries for IP: " + myIP);
        }
    }

    // Initialize status container (with dropdown)
    createStatusContainer();

    // Wait a few seconds to ensure the page and logs are fully loaded before attempting to clear logs
    setTimeout(checkAndClearLogs, 500);

    // Always listen for alert messages on all pages
    listenForAlerts();

})();
